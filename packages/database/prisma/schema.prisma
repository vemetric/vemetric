generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @unique
  email            String   @unique
  emailVerified    Boolean  @default(false)
  receiveEmailTips Boolean  @default(true)
  name             String?
  image            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  sessions           Session[]
  accounts           Account[]
  organizations      UserOrganization[]
  projects           UserProject[]
  emailDripHistory   EmailDripHistory[]
  emailDripSequences EmailDripSequence[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id               String   @id
  name             String   @db.VarChar
  featureFlags     String?  @db.VarChar
  createdAt        DateTime @default(now())
  pricingOnboarded Boolean  @default(false)
  customPlanEvents Int? // Custom event limit override (null = use regular billing)

  users       UserOrganization[]
  project     Project[]
  billingInfo BillingInfo?

  @@map("organization")
}

model BillingInfo {
  organizationId           String       @id
  createdAt                DateTime     @default(now())
  transactionId            String       @db.VarChar
  customerId               String       @db.VarChar
  addressId                String       @db.VarChar
  businessId               String?      @db.VarChar
  productId                String       @db.VarChar // This is how we can identify on which plan the user is subscribed to
  priceId                  String       @db.VarChar // This is how we can identify if it is a yearly or monthly plan
  subscriptionId           String       @db.VarChar
  subscriptionStatus       String       @db.VarChar
  subscriptionEndDate      DateTime?    @db.Date
  subscriptionNextBilledAt DateTime?    @db.Date
  organization             Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("billing_info")
}

enum OrganizationRole {
  ADMIN
  MEMBER
}

model UserOrganization {
  userId         String
  organizationId String
  role           OrganizationRole
  createdAt      DateTime         @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, organizationId])
  @@map("user_organization")
}

model Project {
  id              String    @id
  name            String    @db.VarChar
  domain          String    @unique @db.VarChar
  token           String    @unique @db.VarChar
  organizationId  String
  createdAt       DateTime  @default(now())
  publicDashboard Boolean   @default(false)
  eventIcons      Json      @default("{}")
  firstEventAt    DateTime?

  users            UserProject[]
  organization     Organization        @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dripSequences    EmailDripSequence[]
  emailDripHistory EmailDripHistory[]

  @@map("project")
}

enum ProjectRole {
  ADMIN
  MEMBER
}

model UserProject {
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role      ProjectRole
  createdAt DateTime    @default(now())

  @@id([userId, projectId])
  @@map("user_project")
}

model Salt {
  id        String   @id
  createdAt DateTime @default(now())

  @@map("salt")
}

model UserIdentificationMap {
  projectId  String
  userId     String
  identifier String

  @@id([projectId, userId])
  @@unique([projectId, identifier])
  @@map("user_identification_map")
}

model FailedQueueJob {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  queueName String
  data      Json
  error     String

  @@map("failed_queue_job")
}

enum DripSequenceStatus {
  ACTIVE
  COMPLETED
  ERROR
}

enum DripSequenceType {
  NO_EVENTS
  NO_PROJECT
  FIRST_EVENT_FEEDBACK
}

model EmailDripSequence {
  id              String             @id @default(uuid())
  projectId       String?
  userId          String?
  sequenceType    DripSequenceType
  currentStep     Int                @default(0)
  status          DripSequenceStatus @default(ACTIVE)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  lastEmailSentAt DateTime?
  completedAt     DateTime?

  project          Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailDripHistory EmailDripHistory[]

  @@unique([projectId, sequenceType])
  @@unique([userId, sequenceType])
  @@map("email_drip_sequence")
}

enum EmailStatus {
  SENT
  DELIVERED
  BOUNCED
  FAILED
}

model EmailDripHistory {
  id           String           @id @default(uuid())
  sequenceId   String
  projectId    String?
  userId       String
  sequenceType DripSequenceType
  stepNumber   Int
  emailAddress String           @db.VarChar
  sentAt       DateTime         @default(now())
  messageId    String?          @db.VarChar
  status       EmailStatus      @default(SENT)
  deliveredAt  DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  errorMessage String?

  sequence EmailDripSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  project  Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_drip_history")
}
